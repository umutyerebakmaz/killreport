generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alliance {
  id                      Int      @id
  name                    String
  ticker                  String
  date_founded            DateTime
  creator_corporation_id  Int
  creator_id              Int
  executor_corporation_id Int
  faction_id              Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  corporations Corporation[]

  @@map("alliances")
}

model Corporation {
  id                Int       @id
  name              String
  ticker            String
  member_count      Int
  ceo_id            Int
  creator_id        Int
  date_founded      DateTime?
  description       String?   @db.Text
  alliance_id       Int?
  faction_id        Int?
  home_station_id   Int?
  shares            BigInt?
  tax_rate          Float
  url               String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  alliance Alliance? @relation(fields: [alliance_id], references: [id])

  @@index([alliance_id])
  @@map("corporations")
}

model Character {
  id              Int       @id
  name            String
  corporation_id  Int
  alliance_id     Int?
  birthday        DateTime
  bloodline_id    Int
  race_id         Int
  gender          String
  security_status Float?
  description     String?   @db.Text
  title           String?
  faction_id      Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("characters")
}

model User {
  id                   Int      @id @default(autoincrement())
  character_id         Int      @unique
  character_name       String
  character_owner_hash String
  access_token         String   @db.Text
  refresh_token        String?  @db.Text
  expires_at           DateTime
  email                String?  @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([character_id])
  @@index([expires_at])
  @@map("users")
}

model Killmail {
  killmail_id      Int      @id
  killmail_hash    String
  killmail_time    DateTime
  solar_system_id  Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  victim    Victim?
  attackers Attacker[]
  items     KillmailItem[]

  @@index([killmail_time])
  @@index([solar_system_id])
  @@map("killmails")
}

model Victim {
  killmail_id    Int   @id
  character_id   Int?
  corporation_id Int
  alliance_id    Int?
  faction_id     Int?
  ship_type_id   Int
  damage_taken   Int
  position_x     Float?
  position_y     Float?
  position_z     Float?

  created_at DateTime @default(now())

  killmail Killmail @relation(fields: [killmail_id], references: [killmail_id], onDelete: Cascade)

  @@index([character_id])
  @@index([corporation_id])
  @@index([alliance_id])
  @@index([ship_type_id])
  @@map("victims")
}

model Attacker {
  id              BigInt  @id @default(autoincrement())
  killmail_id     Int
  character_id    Int?
  corporation_id  Int?
  alliance_id     Int?
  faction_id      Int?
  ship_type_id    Int?
  weapon_type_id  Int?
  damage_done     Int
  final_blow      Boolean
  security_status Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  killmail Killmail @relation(fields: [killmail_id], references: [killmail_id], onDelete: Cascade)

  @@index([killmail_id])
  @@index([character_id])
  @@index([corporation_id])
  @@index([alliance_id])
  @@map("attackers")
}

model KillmailItem {
  id                 BigInt @id @default(autoincrement())
  killmail_id        Int
  item_type_id       Int
  flag               Int
  quantity_dropped   Int?
  quantity_destroyed Int?
  singleton          Int

  created_at DateTime @default(now())

  killmail Killmail @relation(fields: [killmail_id], references: [killmail_id], onDelete: Cascade)

  @@index([killmail_id])
  @@index([item_type_id])
  @@map("killmail_items")
}

model SyncJob {
  id          BigInt   @id @default(autoincrement())
  entity_type String   // 'alliance', 'corporation', 'character', 'killmail'
  entity_id   BigInt
  status      String   // 'pending', 'processing', 'completed', 'failed'
  retry_count Int      @default(0)
  error       String?  @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([entity_type, status])
  @@index([entity_id, entity_type])
  @@map("sync_jobs")
}
