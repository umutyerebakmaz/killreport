generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alliance {
  id                      Int      @id
  name                    String
  ticker                  String
  date_founded            DateTime
  creator_corporation_id  Int
  creator_id              Int
  executor_corporation_id Int
  faction_id              Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("alliance")
}

model Corporation {
  id                Int       @id
  name              String
  ticker            String
  member_count      Int
  ceo_id            Int
  creator_id        Int
  date_founded      DateTime?
  description       String?   @db.Text
  alliance_id       Int?
  faction_id        Int?
  home_station_id   Int?
  shares            BigInt?
  tax_rate          Float
  url               String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("corporation")
}

model Character {
  id              Int       @id
  name            String
  corporation_id  Int
  alliance_id     Int?
  birthday        DateTime
  bloodline_id    Int
  race_id         Int
  gender          String
  security_status Float?
  description     String?   @db.Text
  title           String?
  faction_id      Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("character")
}

model User {
  id              Int       @id @default(autoincrement())
  characterId     Int       @unique @map("character_id")
  characterName   String    @map("character_name")
  characterOwnerHash String @map("character_owner_hash")
  accessToken     String    @map("access_token") @db.Text
  refreshToken    String?   @map("refresh_token") @db.Text
  expiresAt       DateTime  @map("expires_at")
  email           String?   @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([characterId])
  @@index([expiresAt])
  @@map("user")
}

model Killmail {
  killmailId             Int      @id @map("killmail_id")
  killmailHash           String   @map("killmail_hash")
  killmail_time          DateTime
  solar_system_id        Int
  victim_character_id    Int?
  victim_corporation_id  Int
  victim_alliance_id     Int?
  victim_ship_type_id    Int
  victim_damage_taken    Int
  victim_position_x      Float?
  victim_position_y      Float?
  victim_position_z      Float?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  attackers Attacker[]

  @@index([victim_character_id])
  @@index([victim_corporation_id])
  @@map("killmail")
}

model Attacker {
  killmail_id        Int
  character_id       Int
  corporation_id     Int?
  alliance_id        Int?
  ship_type_id       Int?
  weapon_type_id     Int?
  damage_done        Int
  final_blow         Boolean
  security_status    Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  killmail Killmail @relation(fields: [killmail_id], references: [killmailId], onDelete: Cascade)

  @@id([killmail_id, character_id])
  @@index([character_id])
  @@map("attacker")
}

model SyncJob {
  id          BigInt   @id @default(autoincrement())
  entity_type String   // 'alliance', 'corporation', 'character', 'killmail'
  entity_id   BigInt
  status      String   // 'pending', 'processing', 'completed', 'failed'
  retry_count Int      @default(0)
  error       String?  @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([entity_type, status])
  @@index([entity_id, entity_type])
  @@map("sync_job")
}
