extend type Query {
  """
  Fetches a single killmail
  """
  killmail(id: ID!): Killmail

  """
  Lists all killmails (with pagination)
  """
  killmails(limit: Int, offset: Int): [Killmail!]!

  """
  Fetches the authenticated user's own killmails
  Requires: Authentication
  """
  myKillmails(limit: Int): [Killmail!]!

  """
  Fetches the authenticated user's corporation killmails
  Requires: Authentication + esi-killmails.read_corporation_killmails.v1 scope
  """
  myCorporationKillmails(limit: Int): [Killmail!]!
}

extend type Mutation {
  """
  Fetches user's killmails from ESI and saves to database
  Requires: Authentication
  """
  syncMyKillmails: SyncResult!
}

type SyncResult {
  success: Boolean!
  message: String!
  syncedCount: Int!
}

type Killmail {
  id: ID!
  killmailId: Int!
  killmailHash: String!
  killmailTime: String!
  solarSystemId: Int!
  victim: Victim!
  attackers: [Attacker!]!
  items: [KillmailItem!]!
  totalValue: Float
  createdAt: String!
}

type Victim {
  characterId: Int
  characterName: String
  corporationId: Int!
  corporationName: String
  allianceId: Int
  allianceName: String
  factionId: Int
  shipTypeId: Int!
  shipTypeName: String
  damageTaken: Int!
  position: Position
}

type Position {
  x: Float!
  y: Float!
  z: Float!
}

type Attacker {
  characterId: Int
  characterName: String
  corporationId: Int
  corporationName: String
  allianceId: Int
  allianceName: String
  factionId: Int
  shipTypeId: Int
  shipTypeName: String
  weaponTypeId: Int
  weaponTypeName: String
  damageDone: Int!
  finalBlow: Boolean!
  securityStatus: Float!
}

type KillmailItem {
  itemTypeId: Int!
  itemTypeName: String
  flag: Int!
  quantityDropped: Int
  quantityDestroyed: Int
  singleton: Int!
}
