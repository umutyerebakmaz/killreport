input AddCharacterInput {
  corporation: String
  name: String!
  userId: ID!
}

type Alliance {
  corporations: [Corporation!]
  creator_corporation_id: Int!
  creator_id: Int!
  date_founded: String!
  executor_corporation_id: Int!
  faction_id: Int
  id: Int!
  name: String!
  ticker: String!
}

input AllianceFilter {
  limit: Int
  name: String
  page: Int
  search: String
  ticker: String
}

type AlliancesResponse {
  data: [Alliance!]!
  pageInfo: PageInfo!
}

type Attacker {
  characterId: Int
  characterName: String
  corporationId: Int
  finalBlow: Boolean
  shipTypeId: Int
  weaponTypeId: Int
}

type AuthPayload {
  """JWT access token"""
  accessToken: String!

  """Token geçerlilik süresi (saniye)"""
  expiresIn: Int!

  """Token yenilemek için kullanılan refresh token"""
  refreshToken: String

  """Authenticated kullanıcı bilgileri"""
  user: User!
}

type AuthUrl {
  """CSRF koruması için state parametresi"""
  state: String!

  """Eve Online SSO authorization URL'i"""
  url: String!
}

type Character {
  alliance: String
  corporation: String
  id: ID!
  name: String!
  securityStatus: Float
  user: User
}

type Corporation {
  alliance: Alliance
  alliance_id: Int
  ceo_id: Int!
  creator_id: Int!
  date_founded: String
  faction_id: Int
  id: Int!
  member_count: Int!
  name: String!
  tax_rate: Float!
  ticker: String!
  url: String
}

input CreateUserInput {
  email: String!
  name: String!
}

type Killmail {
  attackers: [Attacker!]!
  id: ID!
  killmailHash: String!
  killmailId: Int!
  killmailTime: String!
  totalValue: Float
  victim: Victim!
}

type Mutation {
  addCharacter(input: AddCharacterInput!): Character!

  """Authorization code ile authentication yapar ve token döner"""
  authenticateWithCode(code: String!, state: String!): AuthPayload!
  createUser(input: CreateUserInput!): User!

  """Eve Online SSO login için authorization URL'i oluşturur"""
  login: AuthUrl!

  """Refresh token kullanarak yeni access token alır"""
  refreshToken(refreshToken: String!): AuthPayload!
  startAllianceSync: Boolean

  """
  Fetches user's killmails from ESI and saves to database
  Requires: Authentication
  """
  syncMyKillmails: SyncResult!
  updateUser(id: ID!, input: UpdateUserInput!): User
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nextCursor: Int
  previousCursor: Int
  totalCount: Int!
  totalPages: Int!
}

type Query {
  alliance(id: Int!): Alliance
  alliances(filter: AllianceFilter): AlliancesResponse!
  character(id: ID!): Character
  charactersByUser(userId: ID!): [Character!]!
  corporation(id: Int!): Corporation

  """Fetches a single killmail"""
  killmail(id: ID!): Killmail

  """Lists all killmails (with pagination)"""
  killmails(limit: Int, offset: Int): [Killmail!]!

  """Mevcut authenticated kullanıcının bilgilerini döner"""
  me: User

  """
  Fetches the authenticated user's corporation killmails
  Requires: Authentication + esi-killmails.read_corporation_killmails.v1 scope
  """
  myCorporationKillmails(limit: Int): [Killmail!]!

  """
  Fetches the authenticated user's own killmails
  Requires: Authentication
  """
  myKillmails(limit: Int): [Killmail!]!
  user(id: ID!): User
  users: [User!]!
}

type SyncResult {
  message: String!
  success: Boolean!
  syncedCount: Int!
}

input UpdateUserInput {
  email: String
  name: String
}

type User {
  createdAt: String!
  email: String!
  id: ID!
  name: String!
}

type Victim {
  characterId: Int
  characterName: String
  corporationId: Int
  corporationName: String
  damageTaken: Int
  shipTypeId: Int
}